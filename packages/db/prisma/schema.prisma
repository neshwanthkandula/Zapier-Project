generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"] // ADD THIS LINE
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String
  password String
  zaps     Zap[]
}

model Zap {
  id           String  @id @default(uuid())
  userId       Int
  trigger      Trigger?
  actions      Action[]
  zapRuns      ZapRun[]
  user         User @relation(fields: [userId], references: [id])
}

model Trigger {
  id          String  @id @default(uuid())
  zapId       String  @unique
  triggerId   String //availabletrriggerid
  metadata    Json  @default("{}")
  type  AvailableTrigger @relation(fields: [triggerId], references: [id])
  zap  Zap                @relation(fields: [zapId], references: [id])
}

model Action {
  id        String  @id @default(uuid())
  zapId     String  
  zap       Zap     @relation(fields: [zapId], references: [id])
  actionId  String //available actionid
  metadata    Json  @default("{}")
  type      AvailableAction @relation(fields: [actionId], references: [id])
  sortingOrder Int    @default(0)
}

model AvailableAction {
  id       String @id @default(uuid())
  name     String
  image    String
  metadataSchema Json? //update
  actions  Action[]
}

model AvailableTrigger {
  id       String @id @default(uuid())
  name     String 
  image    String
  triggers Trigger[]
}

model ZapRun {
  id           String @id @default(uuid())
  zapId        String
  metadata     Json
  zap          Zap @relation(fields: [zapId], references: [id])
  zapRunOutbox ZapRunOutbox?
}

model ZapRunOutbox {
  id          String @id @default(uuid())
  zapRunId    String @unique
  zapRun      ZapRun @relation(fields: [zapRunId], references: [id])
}